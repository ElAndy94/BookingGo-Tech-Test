{"version":3,"sources":["components/Button/Button.js","utils/GetPlaceColor.js","utils/GetPlaceType.js","services/DataService.js","components/SearchBox/SearchBox.js","components/App.js","index.js"],"names":["Button","props","disabled","className","btnType","join","onClick","clicked","children","placeColorMap","A","C","T","D","GetPlaceColor","placeTypeCode","placeTypeMap","GetPlaceType","DataService","getData","searchTerm","axios","get","then","res","catch","err","Promise","reject","SearchBox","inputEl","useRef","useState","results","setResults","showLocations","setShowLocations","locations","setLocations","useEffect","resetSearchbar","handleChange","current","value","length","data","docs","id","slice","map","placeName","name","iata","placeLocation","city","region","country","key","bookingId","style","backgroundColor","getPlaceColor","placeType","getPlaceType","type","autoComplete","placeholder","aria-label","ref","onChange","_","debounce","onBlur","App","ReactDOM","render","document","querySelector"],"mappings":"iUAceA,G,YAVA,SAAAC,GAAK,OAClB,4BACEC,SAAUD,EAAMC,SAChBC,UAAW,CAAC,SAAU,CAACF,EAAMG,UAAUC,KAAK,KAC5CC,QAASL,EAAMM,SAEdN,EAAMO,YCVLC,EAAgB,CACpBC,EAAG,mBACHC,EAAG,mBACHC,EAAG,kBACHC,EAAG,mBAKUC,EAHO,SAAAC,GAAa,OACjCN,EAAcM,IAAkB,oBCP5BC,EAAe,CACnBN,EAAG,UACHC,EAAG,OACHC,EAAG,UACHC,EAAG,YAIUI,EAFM,SAAAF,GAAa,OAAIC,EAAaD,IAAkB,S,yBCJ/DG,E,kCAAAA,EACGC,QAAU,SAAAC,GACf,OAAOC,IACJC,IADI,6FAEmFF,IAEvFG,MAAK,SAAAC,GACJ,OAAOA,KAERC,OAAM,SAAAC,GACL,OAAOC,QAAQC,OAAOF,OAKfR,QC4GAW,EApHG,WAChB,IAAMC,EAAUC,mBADM,EAEMC,mBAAS,IAFf,mBAEjBC,EAFiB,KAERC,EAFQ,OAGkBF,oBAAS,GAH3B,mBAGjBG,EAHiB,KAGFC,EAHE,OAIUJ,qBAJV,mBAIjBK,EAJiB,KAINC,EAJM,KAMtBC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAiB,WACrBJ,GAAiB,GACjBE,EAAa,KAGTG,EAAe,WACnB,GAAIX,EAAQY,QAAQC,MAAMC,OAAS,EAGjC,OAFAR,GAAiB,QACjBE,EAAa,IAIfpB,EAAYC,QAAQW,EAAQY,QAAQC,OAAOpB,MAAK,SAAAC,GAC9CY,GAAiB,GACjBF,EAAWV,EAAIqB,KAAKZ,QAAQa,SAG1Bb,EAAQW,QAAUT,GACpBG,EACE,yBAAKS,GAAG,gCACN,wBAAI5C,UAAU,2BACX8B,EAAQe,MAAM,EAAG,GAAGC,KAAI,SAAAN,GACvB,IAAMO,EAAS,UAAMP,EAAMQ,KAAZ,YACbR,EAAMS,KAAN,WAAiBT,EAAMS,KAAvB,KAAiC,IAG7BC,EAAa,UACjBV,EAAMW,KAAOX,EAAMW,KAAOX,EAAMY,OADf,aAEdZ,EAAMa,SAEX,MAAmB,qBAAfb,EAAMQ,KAEN,wBAAIhD,UAAU,YAAYsD,IAAKd,EAAMe,WACnC,yBAAKvD,UAAU,8BACb,yBAAKA,UAAU,yBAAyB+C,KAO9C,wBAAI/C,UAAU,YAAYsD,IAAKd,EAAMe,WACnC,yBAAKvD,UAAU,+BACb,yBACEwD,MAAO,CACLC,gBAAiBC,EAAclB,EAAMmB,aAGtCC,EAAapB,EAAMmB,aAGxB,yBAAK3D,UAAU,8BACb,yBAAKA,UAAU,yBAAyB+C,GACxC,yBAAK/C,UAAU,wBAAwBkD,YAgBzD,OACE,yBAAKlD,UAAU,cACb,wBAAIA,UAAU,oBAAd,kCACA,8BACE,6BACE,2BAAOA,UAAU,oBAAjB,oBACA,2BACEA,UAAU,mBACV4C,GAAG,mBACHI,KAAK,iBACLa,KAAK,OACLC,aAAa,MACbC,YAAY,iDACZC,aAAW,iDACXC,IAAKtC,EACLuC,SAAUC,IAAEC,SAAS9B,EAAc,KACnC+B,OArBU,WAClBpC,GAAiB,GACjBE,EAAa,QAuBRD,EAED,kBAAC,EAAD,CACElC,UAAU,oBACVC,QAAQ,UACRG,QAAS,WACPkC,MAJJ,aCpGOgC,EALH,kBACV,yBAAKtE,UAAU,OACb,kBAAC,EAAD,QCDJuE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,Y","file":"static/js/main.c44f2675.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Button.scss';\n\nconst Button = props => (\n  <button\n    disabled={props.disabled}\n    className={['button', [props.btnType]].join(' ')}\n    onClick={props.clicked}\n  >\n    {props.children}\n  </button>\n);\n\nexport default Button;\n","const placeColorMap = {\n  A: 'rgb(150, 20, 18)',\n  C: 'rgb(10, 99, 176)',\n  T: 'rgb(91, 91, 91)',\n  D: 'rgb(1, 124, 68)'\n};\nconst GetPlaceColor = placeTypeCode =>\n  placeColorMap[placeTypeCode] || 'rgb(255, 154, 2)';\n\nexport default GetPlaceColor;\n","const placeTypeMap = {\n  A: 'Airport',\n  C: 'City',\n  T: 'Station',\n  D: 'District'\n};\nconst GetPlaceType = placeTypeCode => placeTypeMap[placeTypeCode] || 'Place';\n\nexport default GetPlaceType;\n","import axios from 'axios';\n\nclass DataService {\n  static getData = searchTerm => {\n    return axios\n      .get(\n        `https://www.rentalcars.com/FTSAutocomplete.do?solrIndex=fts_en&solrRows=6&solrTerm=${searchTerm}`\n      )\n      .then(res => {\n        return res;\n      })\n      .catch(err => {\n        return Promise.reject(err);\n      });\n  };\n}\n\nexport default DataService;\n","import React, { useRef, useState, useEffect } from 'react';\nimport _ from 'lodash';\n\nimport './SearchBox.scss';\nimport Button from '../Button/Button';\nimport getPlaceColor from '../../utils/GetPlaceColor';\nimport getPlaceType from '../../utils/GetPlaceType';\nimport DataService from '../../services/DataService';\n\nconst SearchBox = () => {\n  const inputEl = useRef();\n  let [results, setResults] = useState([]);\n  let [showLocations, setShowLocations] = useState(false);\n  let [locations, setLocations] = useState();\n\n  useEffect(() => {\n    resetSearchbar();\n  }, []);\n\n  const resetSearchbar = () => {\n    setShowLocations(false);\n    setLocations('');\n  };\n\n  const handleChange = () => {\n    if (inputEl.current.value.length < 2) {\n      setShowLocations(false);\n      setLocations('');\n      return;\n    }\n\n    DataService.getData(inputEl.current.value).then(res => {\n      setShowLocations(true);\n      setResults(res.data.results.docs);\n    });\n\n    if (results.length && showLocations) {\n      setLocations(\n        <div id='search_box_results_container'>\n          <ul className='pickup_location_results'>\n            {results.slice(0, 6).map(value => {\n              const placeName = `${value.name} ${\n                value.iata ? `(${value.iata})` : ''\n              }`;\n\n              const placeLocation = `${\n                value.city ? value.city : value.region\n              }, ${value.country}`;\n\n              if (value.name === 'No results found') {\n                return (\n                  <li className='list_item' key={value.bookingId}>\n                    <div className='results_location_container'>\n                      <div className='results_location_name'>{placeName}</div>\n                    </div>\n                  </li>\n                );\n              }\n\n              return (\n                <li className='list_item' key={value.bookingId}>\n                  <div className='results_bookingId_container'>\n                    <div\n                      style={{\n                        backgroundColor: getPlaceColor(value.placeType)\n                      }}\n                    >\n                      {getPlaceType(value.placeType)}\n                    </div>\n                  </div>\n                  <div className='results_location_container'>\n                    <div className='results_location_name'>{placeName}</div>\n                    <div className='results_support_text'>{placeLocation}</div>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      );\n    }\n  };\n\n  const blurResults = () => {\n    setShowLocations(false);\n    setLocations('');\n  };\n\n  return (\n    <div className='search_box'>\n      <h1 className='search_box_title'>Let’s find your ideal car</h1>\n      <form>\n        <div>\n          <label className='search_box_label'>Pick-up Location</label>\n          <input\n            className='search_box_input'\n            id='search_box_input'\n            name='pickupLocation'\n            type='text'\n            autoComplete='off'\n            placeholder='city, airport, station, region, district…'\n            aria-label='city, airport, station, region, district…'\n            ref={inputEl}\n            onChange={_.debounce(handleChange, 250)}\n            onBlur={blurResults}\n          />\n        </div>\n\n        {locations}\n\n        <Button\n          className='search_box_button'\n          btnType='success'\n          clicked={() => {\n            handleChange();\n          }}\n          //disabled={true}\n        >\n          Search\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nimport './App.scss';\nimport SearchBox from '../components/SearchBox/SearchBox';\n\nconst App = () => (\n  <div className='App'>\n    <SearchBox />\n  </div>\n);\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'index.scss';\nimport App from 'components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}